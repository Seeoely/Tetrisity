{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red61\green73\blue78;\red255\green255\blue255;\red96\green126\blue3;
\red9\green74\blue76;\red131\green148\blue149;\red199\green63\blue5;\red17\green134\blue139;\red52\green62\blue66;
}
{\*\expandedcolortbl;;\cssrgb\c30588\c35686\c38039;\cssrgb\c100000\c100000\c100000;\cssrgb\c44706\c55686\c0;
\cssrgb\c0\c36078\c37255;\cssrgb\c58431\c64706\c65098;\cssrgb\c82745\c32941\c0;\cssrgb\c0\c59216\c61569;\cssrgb\c26275\c30980\c32941;
}
\margl1440\margr1440\vieww8060\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tetris Final Code\cb1 \
\
\cf4 \cb3 \strokec4 #include\cf2 \strokec2  \cf5 \strokec5 <Arduino.h>\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #include\cf2 \strokec2  \cf5 \strokec5 <FastLED.h>\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //Definitions for all the pins we need and all the LED board parameters\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 LED_PIN\cf2 \strokec2      \cf5 \strokec5 2\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 NUM_LEDS\cf2 \strokec2     \cf5 \strokec5 256\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 LED_TYPE\cf2 \strokec2     WS2812\cb1 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 COLOR_ORDER\cf2 \strokec2  GRB\cb1 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 BRIGHTNESS\cf2 \strokec2   \cf5 \strokec5 20\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 MATRIX_WIDTH\cf2 \strokec2   \cf5 \strokec5 16\cf2 \cb1 \strokec2 \
\cf4 \cb3 \strokec4 #define\cf2 \strokec2  \cf7 \strokec7 MATRIX_HEIGHT\cf2 \strokec2  \cf5 \strokec5 16\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //assignments for all the global variables used throughout the entire program (keeping time/pace, noises, and score)\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 unsigned\cf2 \strokec2  \cf8 \strokec8 long\cf2 \strokec2  fallTimer = \cf5 \strokec5 0\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 unsigned\cf2 \strokec2  \cf8 \strokec8 long\cf2 \strokec2  fallInterval = \cf5 \strokec5 1000\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 unsigned\cf2 \strokec2  \cf8 \strokec8 long\cf2 \strokec2  score = \cf5 \strokec5 0\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  speakerPin = \cf5 \strokec5 9\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  blipFrequency = \cf5 \strokec5 30\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  lockFrequency = \cf5 \strokec5 200\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  littleFrequency = \cf5 \strokec5 900\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  thungFrequency = \cf5 \strokec5 1500\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  GOF1 = \cf5 \strokec5 800\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  GOF2 = \cf5 \strokec5 500\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 int\cf2 \strokec2  GOF3 = \cf5 \strokec5 200\cf2 \strokec2 ;\cb1 \
\
\
\cf6 \cb3 \strokec6 //all of the Tetris structures, Tetrimino shapes, colors, and position logic initiaition\cf2 \cb1 \strokec2 \
\cb3 CRGB \cf7 \strokec7 leds\cf2 \strokec2 [NUM_LEDS];\cb1 \
\
\cf8 \cb3 \strokec8 struct\cf2 \strokec2  Tetrimino \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 shape\cf2 \strokec2 [\cf5 \strokec5 4\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ];\cb1 \
\cb3   CRGB color;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\cb3 Tetrimino currentTetrimino, nextTetrimino;\cb1 \
\cf8 \cb3 \strokec8 int\cf2 \strokec2  posX = \cf5 \strokec5 0\cf2 \strokec2 , posY = \cf5 \strokec5 0\cf2 \strokec2 ;\cf6 \strokec6  //initialize position of piece\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 board\cf2 \strokec2 [MATRIX_HEIGHT][MATRIX_WIDTH - \cf5 \strokec5 4\cf2 \strokec2 ] = \cf9 \strokec9 \{\cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 TETRIMINOS\cf2 \strokec2 [\cf5 \strokec5 7\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ] = \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6   // I-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // J-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // L-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // O-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // S-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // Z-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cf6 \cb3 \strokec6   // T-Block\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  CRGB \cf7 \strokec7 TETRIMINO_COLORS\cf2 \strokec2 [\cf5 \strokec5 7\cf2 \strokec2 ] = \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   CRGB::Blue,\cf6 \strokec6     // I-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Green,\cf6 \strokec6    // J-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Orange,\cf6 \strokec6   // L-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Yellow,\cf6 \strokec6   // O-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Magenta,\cf6 \strokec6  // S-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Red,\cf6 \strokec6      // Z-Block\cf2 \cb1 \strokec2 \
\cb3   CRGB::Cyan\cf6 \strokec6      // T-Block\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\
\cf6 \cb3 \strokec6 //digits to display score at game over\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 const\cf2 \strokec2  \cf8 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 digits\cf2 \strokec2 [\cf5 \strokec5 10\cf2 \strokec2 ][\cf5 \strokec5 5\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ] = \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //0\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //1\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //2\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //3\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //4\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //5\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //6\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //7\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //8\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3   \cf9 \strokec9 \{\cf6 \strokec6 //9\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ,\cb1 \
\cb3     \cf9 \strokec9 \{\cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 1\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\
\cf6 \cb3 \strokec6 //rainbow animation to transition between game states\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 rainbowAnimation\cf9 \strokec9 (\cf8 \strokec8 uint8_t\cf2 \strokec2  \cf9 \strokec9 wait)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6   // Turn on LEDs sequentially in a rainbow of hues\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 uint16_t\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < NUM_LEDS; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 leds\cf2 \strokec2 [i] = \cf7 \strokec7 CHSV\cf9 \strokec9 ((\cf2 \strokec2 i * \cf5 \strokec5 256\cf2 \strokec2  / NUM_LEDS\cf9 \strokec9 )\cf2 \strokec2  % \cf5 \strokec5 256\cf2 \strokec2 , \cf5 \strokec5 255\cf2 \strokec2 , \cf5 \strokec5 255\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 delay\cf9 \strokec9 (\cf2 \strokec2 wait\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cb1 \
\cf6 \cb3 \strokec6   // Wait a bit before turning off\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 delay\cf9 \strokec9 (\cf2 \strokec2 wait * \cf5 \strokec5 5\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\
\cf6 \cb3 \strokec6   // Turn off LEDs sequentially\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 uint16_t\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < NUM_LEDS; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 leds\cf2 \strokec2 [i] = \cf7 \strokec7 CHSV\cf9 \strokec9 (\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // CHSV(0, 0, 0) is off/black\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 delay\cf9 \strokec9 (\cf2 \strokec2 wait\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //setup initiates game, starts borders, generates pieces, and allows for input\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 setup\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 addLeds\cf2 \strokec2 <LED_TYPE, LED_PIN, COLOR_ORDER>\cf9 \strokec9 (\cf2 \strokec2 leds, NUM_LEDS\cf9 \strokec9 )\cf2 \strokec2 .\cf7 \strokec7 setCorrection\cf9 \strokec9 (\cf2 \strokec2 TypicalLEDStrip\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 setBrightness\cf9 \strokec9 (\cf2 \strokec2 BRIGHTNESS\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 clear\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 rainbowAnimation\cf9 \strokec9 (\cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 clearBoard\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 Serial\cf2 \strokec2 .\cf7 \strokec7 begin\cf9 \strokec9 (\cf5 \strokec5 115200\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 setupBorders\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 randomSeed\cf9 \strokec9 (\cf7 \strokec7 analogRead\cf9 \strokec9 (\cf5 \strokec5 0\cf9 \strokec9 ))\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 spawnNewTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //main game loop that moves and locks pieces, checks for game over, and gets user input\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 loop\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 unsigned\cf2 \strokec2  \cf8 \strokec8 long\cf2 \strokec2  currentTime = \cf7 \strokec7 millis\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf6 \cb3 \strokec6   // Handle falling pieces\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 currentTime - fallTimer > fallInterval\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 clearTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     posY++;\cb1 \
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       posY--;\cb1 \
\cb3       \cf7 \strokec7 lockTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 clearAndDropRows\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 spawnNewTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf6 \cb3 \strokec6       // Check for game over and reset the game\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 isGameOver\cf9 \strokec9 ())\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, GOF1, \cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, GOF2, \cf5 \strokec5 1000\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, GOF3, \cf5 \strokec5 1000\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 clearBoard\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 displayScore\cf9 \strokec9 (\cf2 \strokec2 score\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Display the score\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 5000\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cf6 \cb3 \strokec6         // Reset game state\cf2 \cb1 \strokec2 \
\cb3         score = \cf5 \strokec5 0\cf2 \strokec2 ;\cf6 \strokec6  // Reset the score\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 rainbowAnimation\cf9 \strokec9 (\cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 setupBorders\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 clearBoardArray\cf9 \strokec9 ()\cf2 \strokec2 ;\cf6 \strokec6   // Clear the board array\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 randomSeed\cf9 \strokec9 (\cf7 \strokec7 analogRead\cf9 \strokec9 (\cf5 \strokec5 0\cf9 \strokec9 ))\cf2 \strokec2 ;\cb1 \
\cb3         \cf7 \strokec7 spawnNewTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 Serial\cf2 \strokec2 .\cf7 \strokec7 print\cf9 \strokec9 (\cf5 \strokec5 "Score: "\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 Serial\cf2 \strokec2 .\cf7 \strokec7 println\cf9 \strokec9 (\cf2 \strokec2 score\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 displayScoreInBinary\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 drawTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     fallTimer = currentTime;\cf6 \strokec6  //update fall timer\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6   // Process input without waiting for the falling interval to complete\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 processInput\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //method for getting all user input from serial monitor \cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 processInput\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 Serial\cf2 \strokec2 .\cf7 \strokec7 available\cf9 \strokec9 ()\cf2 \strokec2  > \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf8 \strokec8 char\cf2 \strokec2  input = \cf7 \strokec7 Serial\cf2 \strokec2 .\cf7 \strokec7 read\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 clearTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf8 \strokec8 bool\cf2 \strokec2  soundPlayed = \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 'd'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Move right\cf2 \cb1 \strokec2 \
\cb3       posX--;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         posX++;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         soundPlayed = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 'a'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Move left\cf2 \cb1 \strokec2 \
\cb3       posX++;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         posX--;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         soundPlayed = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 'w'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Slow drop\cf2 \cb1 \strokec2 \
\cb3       posY++;\cb1 \
\cb3       posY++;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         posY--;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 's'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Fast drop\cf2 \cb1 \strokec2 \
\cb3       score = score + \cf5 \strokec5 10\cf2 \strokec2 ;\cb1 \
\cb3       \cf4 \strokec4 while\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 !\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY + \cf5 \strokec5 1\cf2 \strokec2 , \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         posY++;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 'q'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Rotate counter-clockwise\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 rotateTetrimino\cf9 \strokec9 (\cf5 \strokec5 true\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 rotateTetrimino\cf9 \strokec9 (\cf5 \strokec5 false\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Revert the rotation if it causes a collision\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         soundPlayed = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 input == 'e'\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Rotate clockwise\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 rotateTetrimino\cf9 \strokec9 (\cf5 \strokec5 false\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf2 \strokec2 posX, posY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf9 \strokec9 ))\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 rotateTetrimino\cf9 \strokec9 (\cf5 \strokec5 true\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Revert the rotation if it causes a collision\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         soundPlayed = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 soundPlayed\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, blipFrequency, \cf5 \strokec5 100\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Play the blip sound for 50 milliseconds\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 drawTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //displays the next piece in the top left corner before the current piece is placed\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 displayNextTetrimino\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf8 \strokec8 int\cf2 \strokec2  displayX = x + \cf5 \strokec5 11\cf2 \strokec2 ;\cb1 \
\cb3       \cf8 \strokec8 int\cf2 \strokec2  displayY = y + \cf5 \strokec5 2\cf2 \strokec2 ;\cb1 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 displayX, displayY, \cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 displayX, displayY, CRGB::Black\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //the method is used to change the colors of individual LEDs, it is called whenever color changes happen\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 x\cf2 \strokec2 , \cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 y\cf2 \strokec2 , CRGB \cf9 \strokec9 color)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  ledIndex;\cb1 \
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 y % \cf5 \strokec5 2\cf2 \strokec2  == \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     ledIndex = y * MATRIX_WIDTH + x;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     ledIndex = \cf9 \strokec9 (\cf2 \strokec2 y + \cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2  * MATRIX_WIDTH - x - \cf5 \strokec5 1\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 leds\cf2 \strokec2 [ledIndex] = color;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //initiallizes borders around the score and next piece area, shows the playing space\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 setupBorders\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < MATRIX_HEIGHT; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf5 \strokec5 10\cf2 \strokec2 , i, CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf5 \strokec5 15\cf2 \strokec2 , i, CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6     // Fill in the top 4 LEDs\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 11\cf2 \strokec2 ; i <= \cf5 \strokec5 14\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 i, MATRIX_HEIGHT - \cf5 \strokec5 1\cf2 \strokec2 , CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6   // Fill in the bottom 4 LEDs\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 11\cf2 \strokec2 ; i <= \cf5 \strokec5 14\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 i, \cf5 \strokec5 0\cf2 \strokec2 , CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 11\cf2 \strokec2 ; i <= \cf5 \strokec5 14\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 i, \cf5 \strokec5 7\cf2 \strokec2 , CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 11\cf2 \strokec2 ; i <= \cf5 \strokec5 14\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 i, \cf5 \strokec5 8\cf2 \strokec2 , CRGB::White\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //places the current tetrimino in the starting place to fall\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 spawnNewTetrimino\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   posY = \cf5 \strokec5 0\cf2 \strokec2 ;\cf6 \strokec6  // Start with the Tetrimino partially off the top of the screen\cf2 \cb1 \strokec2 \
\cb3   posX = \cf5 \strokec5 3\cf2 \strokec2 ;\cb1 \
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf2 \strokec2 .\cf7 \strokec7 r\cf2 \strokec2  == \cf5 \strokec5 0\cf2 \strokec2  && \cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf2 \strokec2 .\cf7 \strokec7 g\cf2 \strokec2  == \cf5 \strokec5 0\cf2 \strokec2  && \cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf2 \strokec2 .\cf7 \strokec7 b\cf2 \strokec2  == \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // If it's the first Tetrimino\cf2 \cb1 \strokec2 \
\cb3     \cf8 \strokec8 int\cf2 \strokec2  randomTetrimino = \cf7 \strokec7 random\cf9 \strokec9 (\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 7\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  //randomizes the next incoming tetrimino\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < \cf5 \strokec5 4\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  j = \cf5 \strokec5 0\cf2 \strokec2 ; j < \cf5 \strokec5 4\cf2 \strokec2 ; j++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [i][j] = \cf7 \strokec7 TETRIMINOS\cf2 \strokec2 [randomTetrimino][i][j];\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf2 \strokec2  = \cf7 \strokec7 TETRIMINO_COLORS\cf2 \strokec2 [randomTetrimino];\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     currentTetrimino = nextTetrimino;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf6 \cb3 \strokec6   // Generate next Tetrimino\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  randomTetrimino = \cf7 \strokec7 random\cf9 \strokec9 (\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 7\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < \cf5 \strokec5 4\cf2 \strokec2 ; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  j = \cf5 \strokec5 0\cf2 \strokec2 ; j < \cf5 \strokec5 4\cf2 \strokec2 ; j++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [i][j] = \cf7 \strokec7 TETRIMINOS\cf2 \strokec2 [randomTetrimino][i][j];\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 nextTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf2 \strokec2  = \cf7 \strokec7 TETRIMINO_COLORS\cf2 \strokec2 [randomTetrimino];\cb1 \
\cb3   \cf7 \strokec7 displayNextTetrimino\cf9 \strokec9 ()\cf2 \strokec2 ;\cf6 \strokec6  // Display the next Tetrimino\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //checks for collisions between pieces and borders of the playing space\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 checkCollision\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 newX\cf2 \strokec2 , \cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 newY\cf2 \strokec2 , \cf8 \strokec8 bool\cf2 \strokec2  \cf9 \strokec9 shape\cf2 \strokec2 [\cf5 \strokec5 4\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 shape\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf8 \strokec8 int\cf2 \strokec2  boardX = newX + x;\cb1 \
\cb3         \cf8 \strokec8 int\cf2 \strokec2  boardY = newY + y;\cb1 \
\
\cb3         \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 boardX < \cf5 \strokec5 0\cf2 \strokec2  || boardX >= MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2  || boardY >= MATRIX_HEIGHT || \cf7 \strokec7 board\cf2 \strokec2 [boardY][boardX]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3           \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3         \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //locks the piece in place whenever it runs into another piece or the bottom row of the playing space\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 lockTetrimino\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf8 \strokec8 int\cf2 \strokec2  boardX = posX + x;\cb1 \
\cb3         \cf8 \strokec8 int\cf2 \strokec2  boardY = posY + y;\cb1 \
\cb3         \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 boardY >= \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf6 \strokec6  // Make sure we don't access negative indices\cf2 \cb1 \strokec2 \
\cb3           \cf7 \strokec7 board\cf2 \strokec2 [boardY][boardX] = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3           \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 boardX, boardY, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3           \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, lockFrequency, \cf5 \strokec5 100\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3         \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //used to draw the current pieces on the LED board using their globally intialized structures\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 drawTetrimino\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 posX + x, posY + y, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //clears the old state of the piece so that the new state can be shown as it falls\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 clearTetrimino\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 posX + x, posY + y, CRGB::Black\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //rotates the tetrimino whenver the user inputs 'e' or 'q'\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 rotateTetrimino\cf9 \strokec9 (\cf8 \strokec8 bool\cf2 \strokec2  \cf9 \strokec9 counterClockwise)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 rotated\cf2 \strokec2 [\cf5 \strokec5 4\cf2 \strokec2 ][\cf5 \strokec5 4\cf2 \strokec2 ];\cb1 \
\cb3   \cb1 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 4\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 counterClockwise\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 rotated\cf2 \strokec2 [y][x] = \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [x][\cf5 \strokec5 3\cf2 \strokec2  - y];\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 rotated\cf2 \strokec2 [y][x] = \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 [\cf5 \strokec5 3\cf2 \strokec2  - x][y];\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3   \cf7 \strokec7 memcpy\cf9 \strokec9 (\cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 shape\cf2 \strokec2 , rotated, sizeof\cf9 \strokec9 (\cf2 \strokec2 rotated\cf9 \strokec9 ))\cf2 \strokec2 ;\cf6 \strokec6 //copies contents of rotated array to determine the correct orientation\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //clears the rows that are full and calls the dropRow function to drops the remaining \cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 clearAndDropRows\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 bool\cf2 \strokec2  rowFull;\cb1 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  rowsCleared = \cf5 \strokec5 0\cf2 \strokec2 ;\cb1 \
\
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < MATRIX_HEIGHT; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     rowFull = \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 !\cf7 \strokec7 board\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         rowFull = \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cb3         \cf4 \strokec4 break\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 rowFull\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       rowsCleared++;\cb1 \
\cb3       \cf7 \strokec7 dropRow\cf9 \strokec9 (\cf2 \strokec2 y\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       y--;\cf6 \strokec6  // Check the same row again after dropping\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 rowsCleared > \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 updateScore\cf9 \strokec9 (\cf2 \strokec2 rowsCleared\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //drops the rows necessary after clearing a row\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 dropRow\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 row)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = row; y > \cf5 \strokec5 0\cf2 \strokec2 ; y--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 board\cf2 \strokec2 [y][x] = \cf7 \strokec7 board\cf2 \strokec2 [y - \cf5 \strokec5 1\cf2 \strokec2 ][x];\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6   // Clear the top row\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 board\cf2 \strokec2 [\cf5 \strokec5 0\cf2 \strokec2 ][x] = \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6   // Redraw the board to reflect the dropped rows\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y <= row; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 board\cf2 \strokec2 [y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 x, y, \cf7 \strokec7 currentTetrimino\cf2 \strokec2 .\cf7 \strokec7 color\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 x, y, CRGB::Black\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6   // Restore the borders\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 setupBorders\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //checks to see if a row is full and returns a boolean value based on results\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 isRowFull\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 row)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  col = \cf5 \strokec5 0\cf2 \strokec2 ; col < MATRIX_WIDTH - \cf5 \strokec5 6\cf2 \strokec2 ; col++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 !\cf7 \strokec7 board\cf2 \strokec2 [row][col]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //sets all the LEDs of a specified row to black\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 clearRow\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 row)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = row; y > \cf5 \strokec5 0\cf2 \strokec2 ; y--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 1\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 1\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 x, y, CRGB::Black\cf9 \strokec9 )\cf2 \strokec2 ;    \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 1\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 1\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 leds\cf2 \strokec2 [\cf7 \strokec7 XY\cf9 \strokec9 (\cf2 \strokec2 x, \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2 ] = CRGB::Black;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //whenever rows are cleared, this function adds the respective score to the total\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 updateScore\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 linesCleared)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 switch\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 linesCleared\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 case\cf2 \strokec2  \cf5 \strokec5 1\cf2 \strokec2 :\cb1 \
\cb3       score += \cf5 \strokec5 100\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, littleFrequency, \cf5 \strokec5 200\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Play the 'little' sound for 100 milliseconds\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 break\cf2 \strokec2 ;\cb1 \
\cb3     \cf4 \strokec4 case\cf2 \strokec2  \cf5 \strokec5 2\cf2 \strokec2 :\cb1 \
\cb3       score += \cf5 \strokec5 300\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, thungFrequency, \cf5 \strokec5 400\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Play the 'thung' sound for 100 milliseconds\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 break\cf2 \strokec2 ;\cb1 \
\cb3     \cf4 \strokec4 case\cf2 \strokec2  \cf5 \strokec5 3\cf2 \strokec2 :\cb1 \
\cb3       score += \cf5 \strokec5 500\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, thungFrequency, \cf5 \strokec5 600\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Play the 'thung' sound for 200 milliseconds\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 break\cf2 \strokec2 ;\cb1 \
\cb3     \cf4 \strokec4 case\cf2 \strokec2  \cf5 \strokec5 4\cf2 \strokec2 :\cb1 \
\cb3       score += \cf5 \strokec5 800\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, thungFrequency, \cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ; \cb1 \
\cb3       \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 150\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf7 \strokec7 tone\cf9 \strokec9 (\cf2 \strokec2 speakerPin, thungFrequency, \cf5 \strokec5 500\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3       \cf4 \strokec4 break\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 displayScoreInBinary\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //this function displays the updated value of the globally assigned "score" variable in the bottom right corner behind the border\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 displayScoreInBinary\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  scoreCopy = score;\cb1 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  row = \cf5 \strokec5 14\cf2 \strokec2 ; row >= \cf5 \strokec5 11\cf2 \strokec2 ; row--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  col = \cf5 \strokec5 14\cf2 \strokec2 ; col >= \cf5 \strokec5 11\cf2 \strokec2 ; col--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 scoreCopy % \cf5 \strokec5 2\cf2 \strokec2  == \cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 col, row, CRGB::Green\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Set LED color to Green if the corresponding bit is 1\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 col, row, CRGB::Black\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Set LED color to Black if the corresponding bit is 0\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3       scoreCopy >>= \cf5 \strokec5 1\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //drops all rows above the cleared row, then updates LED matrix to reflect new positions\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 dropRowsAbove\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 rowCleared)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  row = rowCleared; row > \cf5 \strokec5 0\cf2 \strokec2 ; row--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  col = \cf5 \strokec5 0\cf2 \strokec2 ; col < MATRIX_WIDTH - \cf5 \strokec5 4\cf2 \strokec2 ; col++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 board\cf2 \strokec2 [row][col] = \cf7 \strokec7 board\cf2 \strokec2 [row - \cf5 \strokec5 1\cf2 \strokec2 ][col];\cb1 \
\cb3       \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 col, row, \cf7 \strokec7 leds\cf2 \strokec2 [\cf7 \strokec7 XY\cf9 \strokec9 (\cf2 \strokec2 col, row - \cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2  % NUM_LEDS]\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //initiates all of the LEDs on the board as an X,Y value in a 16x16 matrix\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 int\cf2 \strokec2  \cf7 \strokec7 XY\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 x\cf2 \strokec2 , \cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 y)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  ledIndex;\cb1 \
\cb3   \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf2 \strokec2 y % \cf5 \strokec5 2\cf2 \strokec2  == \cf5 \strokec5 0\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     ledIndex = y * MATRIX_WIDTH + x;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \strokec2  \cf4 \strokec4 else\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     ledIndex = \cf9 \strokec9 (\cf2 \strokec2 y + \cf5 \strokec5 1\cf9 \strokec9 )\cf2 \strokec2  * MATRIX_WIDTH - x - \cf5 \strokec5 1\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 return\cf2 \strokec2  ledIndex;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //checks for game over condition, which is any piece that gets locked in the top row of the board\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 bool\cf2 \strokec2  \cf7 \strokec7 isGameOver\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH - \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 board\cf2 \strokec2 [\cf5 \strokec5 0\cf2 \strokec2 ][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 true\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 return\cf2 \strokec2  \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //clears the board array that represents the playable space\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 clearBoardArray\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < MATRIX_HEIGHT; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < MATRIX_WIDTH; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf7 \strokec7 board\cf2 \strokec2 [y][x] = \cf5 \strokec5 false\cf2 \strokec2 ;\cb1 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //clears the entire board and changes all LED colors to black\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 clearBoard\cf9 \strokec9 ()\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 uint16_t\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < NUM_LEDS; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 leds\cf2 \strokec2 [i] = CRGB::Black;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //displays a digit in the structure declared at the top of the program\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 drawDigit\cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 digit\cf2 \strokec2 , \cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 topLeftX\cf2 \strokec2 , \cf8 \strokec8 int\cf2 \strokec2  \cf9 \strokec9 topLeftY)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  x = \cf5 \strokec5 0\cf2 \strokec2 ; x < \cf5 \strokec5 4\cf2 \strokec2 ; x++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  y = \cf5 \strokec5 0\cf2 \strokec2 ; y < \cf5 \strokec5 5\cf2 \strokec2 ; y++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3       \cf4 \strokec4 if\cf2 \strokec2  \cf9 \strokec9 (\cf7 \strokec7 digits\cf2 \strokec2 [digit][y][x]\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3         \cf7 \strokec7 setMatrixLEDColor\cf9 \strokec9 (\cf2 \strokec2 topLeftX + x, topLeftY - y, CRGB::Green\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // change y coordinate to flip vertically\cf2 \cb1 \strokec2 \
\cb3       \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3     \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cf6 \cb3 \strokec6 //calls the method above to draw each digit of the total score\cf2 \cb1 \strokec2 \
\cf8 \cb3 \strokec8 void\cf2 \strokec2  \cf7 \strokec7 displayScore\cf9 \strokec9 (\cf8 \strokec8 unsigned\cf2 \strokec2  \cf8 \strokec8 long\cf2 \strokec2  \cf9 \strokec9 score)\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  digitsCount = \cf5 \strokec5 4\cf2 \strokec2 ;\cb1 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  \cf7 \strokec7 positions\cf2 \strokec2 [\cf5 \strokec5 4\cf2 \strokec2 ][\cf5 \strokec5 2\cf2 \strokec2 ] = \cf9 \strokec9 \{\{\cf5 \strokec5 0\cf2 \strokec2 , \cf5 \strokec5 10\cf9 \strokec9 \}\cf2 \strokec2 , \cf9 \strokec9 \{\cf5 \strokec5 4\cf2 \strokec2 , \cf5 \strokec5 10\cf9 \strokec9 \}\cf2 \strokec2 , \cf9 \strokec9 \{\cf5 \strokec5 8\cf2 \strokec2 , \cf5 \strokec5 10\cf9 \strokec9 \}\cf2 \strokec2 , \cf9 \strokec9 \{\cf5 \strokec5 12\cf2 \strokec2 , \cf5 \strokec5 10\cf9 \strokec9 \}\}\cf2 \strokec2 ;\cf6 \strokec6  // update y coordinates to match the new drawDigit function\cf2 \cb1 \strokec2 \
\cb3   \cf8 \strokec8 int\cf2 \strokec2  \cf7 \strokec7 scoreArray\cf2 \strokec2 [\cf5 \strokec5 4\cf2 \strokec2 ] = \cf9 \strokec9 \{\cf5 \strokec5 0\cf9 \strokec9 \}\cf2 \strokec2 ;\cb1 \
\
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = \cf5 \strokec5 0\cf2 \strokec2 ; i < digitsCount; i++\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 scoreArray\cf2 \strokec2 [i] = score % \cf5 \strokec5 10\cf2 \strokec2 ;\cb1 \
\cb3     score /= \cf5 \strokec5 10\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3   \cf4 \strokec4 for\cf2 \strokec2  \cf9 \strokec9 (\cf8 \strokec8 int\cf2 \strokec2  i = digitsCount - \cf5 \strokec5 1\cf2 \strokec2 ; i >= \cf5 \strokec5 0\cf2 \strokec2 ; i--\cf9 \strokec9 )\cf2 \strokec2  \cf9 \strokec9 \{\cf2 \cb1 \strokec2 \
\cb3     \cf7 \strokec7 drawDigit\cf9 \strokec9 (\cf7 \strokec7 scoreArray\cf2 \strokec2 [i], \cf7 \strokec7 positions\cf2 \strokec2 [i][\cf5 \strokec5 0\cf2 \strokec2 ], \cf7 \strokec7 positions\cf2 \strokec2 [i][\cf5 \strokec5 1\cf2 \strokec2 ]\cf9 \strokec9 )\cf2 \strokec2 ;\cb1 \
\cb3   \cf9 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\cb3   \cf7 \strokec7 FastLED\cf2 \strokec2 .\cf7 \strokec7 show\cf9 \strokec9 ()\cf2 \strokec2 ;\cb1 \
\cb3   \cf7 \strokec7 delay\cf9 \strokec9 (\cf5 \strokec5 2000\cf9 \strokec9 )\cf2 \strokec2 ;\cf6 \strokec6  // Display the score for 2 seconds\cf2 \cb1 \strokec2 \
\cf9 \cb3 \strokec9 \}\cf2 \cb1 \strokec2 \
\
\
\
}